@inherits LayoutComponentBase
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject IDataAPI DataAPI

@inject IDataUser DataUser
@inject IDataNivel DataNivel
@inject IDataProyectoUsr DataProyectoUsr


<PageTitle>LibroNovedades</PageTitle>

<div class="page">

    <AuthorizeView>
        <Authorized>

            <div class="sidebar">
                <NavMenu />
            </div>

            <main>
                <div class="top-row px-4 cabeza">
                    <h5 style="text-align: start;">
                    </h5>
                    <BSButton Color="BSColor.Success" IsOutlined="true" @onclick="logout">Logout</BSButton>
                </div>

                <article class="content px-4">
                    @Body
                </article>
            </main>
        </Authorized> 

        <NotAuthorized>
            <main>
                <div class="text-center fondo">
                    <div class="form-signin w-25 m-auto loginform ">
                        <BSAlert IsOpen="_showTooltip" style="height:55px;" class="alertaInfo">
                            <h5>@mensaje</h5>
                        </BSAlert> 

                        <img class="mb-4" id="logoLogin" src="./img/Neo.png">
                        <h1 class="h3 mb-3 fw-normal">Inicie Sesión</h1>
                                <BSLabel IsHidden="true">User</BSLabel>

                                <BSInput InputType="InputType.Text" Required placeholder="Usuario"
                                    @bind-Value="usuario" />
                        
                                <BSInput InputType="InputType.Password" Required placeholder="Contraseña"
                                    @bind-Value="contrasena" />
                            <br>
                            <BSButton IsDisabled="@isDisabled" @onclick=login Class="w-100 btn btn-lg" Color="BSColor.Success" Size="Size.ExtraExtraLarge">login</BSButton>
                    </div>
                </div>              
            </main>
        </NotAuthorized>

    </AuthorizeView> 

</div>

@code {

    private string? mensaje { get; set;} = "Bienvenido";
    private bool isDisabled  { get; set;} = false;
    private string proyecto { get; set;} = "";
    private string usuario {get; set;} = "";
    private string contrasena {get; set;} = "";
    private UserLoginDto userDto {get; set;}
    private HttpResponseMessage result {get; set;}
    private string validarToken  {get; set;}

    @* private Usuario? ObjUsuario {get; set;}
    private ProyectoUsr? proyecto {get; set;} 
    private List<Nivel>? nivelUsuario {get; set;}  *@
    

    protected override async Task  OnInitializedAsync()
    {
        mensaje = "Ingrese la ficha";
        proyecto = "LibroDeNovedades";
        userDto = new UserLoginDto() ;
    }
    protected async Task logout(){
        await LocalStorage.RemoveItemAsync("LibroDeNovedades");
        await AuthStateProvider.GetAuthenticationStateAsync();
    }

    @* protected async Task Login(){
        
        if (username != "" && password != ""){
            ObjUsuario = await DataUser.ObtenerUsuario(username, password);
            if (ObjUsuario != null) {
                proyecto = await DataProyectoUsr.ObtenerProyectoSegunNombre("LibroNovedades");
                if(proyecto != null) {
                    nivelUsuario = await DataNivel.ObtenerNivelesDelUsuarioSegunProyecto(ObjUsuario,proyecto);
                }else{
                    mensaje = "Esta aplicacion se encuenta desactivada. Por favor espere o comuniquece con mejora continua";
                }
            }else{
                mensaje = "El usurio o contraseña no coinciden. Por favor verificar los datos o comuniquece con mejora continua";
            }
        }else{
            mensaje = "Coloque un Usuario y contraseña valida";
        }
    } *@


    protected async Task login(){
        isDisabled = true;
        mensaje = "Cargando...";
        if (usuario.Trim() != "" && contrasena.Trim() != "")
        {
            userDto.Proyecto = proyecto;
            userDto.UserName = usuario;
            userDto.Password = contrasena;
            result = await Http.PostAsJsonAsync("http://neo.paveca.com.ve/Authentication/api/Auth/Login", userDto);
            validarToken = await result.Content.ReadAsStringAsync();
            if (validarToken != null)
            {
                if (validarToken == "NotFoundUser")
                {
                    mensaje = "Verifique el usuario";
                }
                else if (validarToken == "WrongPassword")
                {
                    mensaje = "Verifique la contraseña";
                }
                else if (validarToken == "null")
                {
                    mensaje = "Verifique el usuario";
                }
                else
                {
                    await LocalStorage.SetItemAsync("LibroDeNovedades", validarToken);
                    await AuthStateProvider.GetAuthenticationStateAsync();    
                    NavigationManager.NavigateTo("");
                    mensaje = "Bienvenido";
                }
            }else{
                mensaje = "Hubo un error. Por favor intende de nuevo";
            }
        }else{
            mensaje = "Ingrese un usuario, contraseña valida y ficha valida";
        }
        isDisabled = false;
    }

    @* protected async Task HandleLogin(EditContext e)
    {
        user.Proyecto = "LibroDeNovedades";
        if (e.Validate())
        {
            var result = await Http.PostAsJsonAsync("http://operaciones.papeleslatinos.com/Authentication/api/Auth/Login", user);
            var ValidarToken = await result.Content.ReadAsStringAsync();
            
            //var ValidarToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";
            if (ValidarToken != null)
            {
                if (ValidarToken == "NotFoundUser")
                {

                }
                else if (ValidarToken == "WrongPassword")
                {

                }
                else if (ValidarToken == "null")
                {

                }
                else
                {
                    //mensaje = "Accediendo...";
                    //Console.WriteLine(ValidarToken);
                    await LocalStorage.SetItemAsync("LibroDeNovedades", ValidarToken);
                    await AuthStateProvider.GetAuthenticationStateAsync();    
                    await LocalStorage.SetItemAsync("Identificacion", identificacion);
                    //user = new UserLoginDto();
                    NavigationManager.NavigateTo("");
                }
            }
        }
    } *@
}