@page "/Historico"
@inject IDataArea DataArea
@inject IDataCentro DataCentro
@inject IDataLinea DataLinea
@inject IDataAPI DataAPI
@inject IDataLibroNov DataLibroNov
@inject IDataTiParTP DataTiParTP
@inject IDataPizarra DataPizarra
@inject ILogicLibroNov LogicLibroNov
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Historico</PageTitle>
@if(IsCargado){
    <BSContainer PaddingBottom="Padding.Large">
        <BSRow>
            <h1 class="titulo">Historico</h1>
        </BSRow>
    </BSContainer>

    <BSCard CardType="CardType.Card" style="width: 90%;" MarginBottom="Margins.Large">
        <BSAlert IsOpen="_showTooltip" style="height:55px;" class="alertaInfo"  @ref="_alertRef" Dismissed="Dismissed">
            <h5>@mensaje</h5>
        </BSAlert> 
            <BSCard CardType="CardType.Body">

                <BSCard CardType="CardType.Text">
                    
                    <BSRow>
                        <BSCol Position="Position.Relative" Place ColumnMedium="3">
                            <BSLabel class="labelFormulario">Desde</BSLabel>
                            <BSInput BSInput InputType="InputType.Date" rows="1" @bind-Value="filtroFechaInicio"></BSInput>
                        </BSCol>
                        <BSCol Position="Position.Relative" Place ColumnMedium="3">
                            <BSLabel class="labelFormulario">Hasta</BSLabel>
                            <BSInput BSInput InputType="InputType.Date" rows="1" @bind-Value="filtroFechaFinal"></BSInput>
                        </BSCol>
                        <BSCol Position="Position.Relative" Place ColumnMedium="3">
                            <BSLabel class="labelFormulario">Linea</BSLabel>
                                <BSInput  InputType="InputType.Select" @bind-Value="filtroLinea">
                                    <option value="0">Seleccionar la Linea</option>
                                    @if (listaLineas != null)
                                    {
                                        <option value="0">Todos</option>
                                        @foreach (var item in listaLineas)
                                        {
                                            <option value="@item.IdLinea">@item.Lnom</option>
                                        }
                                    }
                                </BSInput>
                        </BSCol>
                    </BSRow> 
                    <br>
                    <BSRow>
                         <BSCol Position="Position.Relative" Place ColumnMedium="5">
                            <BSLabel class="labelFormulario">Tipo de Novedad</BSLabel>
                                <BSInput  InputType="InputType.Select" @bind-Value="filtroTipoNovedad">
                                    <option value="0">Seleccionar el Tipo de Novedad</option>
                                    @if (listaTiposNovedad != null)
                                    {
                                        <option value="0">Todos</option>
                                        @foreach (var item in listaTiposNovedad)
                                        {
                                            <option value="@item.IdTiParTp">@item.Tpnombre.ToUpper()</option>
                                        }   
                                    }
                                </BSInput>
                        </BSCol>
                    </BSRow>
                    <br>
                    <BSRow>
                        <BSCol Position="Position.Relative" Place ColumnMedium="4">
                            <BSButton class="buttonFormularioOK" IsDisabled="@isDisabled"  @onclick="buscar">Buscar</BSButton>
                        </BSCol>
                    </BSRow>
                    @if (listaNovedades != null)
                    {
                        <br>
                        <br>
                        <BSTable IsResponsive="true" IsStriped="true">
                            <BSTHead>
                                <BSTR class="cabeceraTabla">
                                    <BSTD>Linea</BSTD>
                                    <BSTD>Fecha</BSTD>
                                    <BSTD>Codigo de Equipo</BSTD>
                                    <BSTD>Grupo</BSTD>
                                    <BSTD>Turno</BSTD>
                                    <BSTD>Tiempo Perdido (min)</BSTD>
                                    <BSTD>Discrepancia</BSTD>
                                    @if(isTPM){
                                        <BSTD>Estado</BSTD>
                                    }
                                    @if(IsAccesoPizarra){
                                        
                                        <BSTD>Pizarra Unificada</BSTD>
                                    }
                                </BSTR>
                            </BSTHead>
                            <BSTBody class="cuerpoTabla">
                                @foreach (var item in listaNovedades){
                                    <BSTR>
                                        <BSTD>@item.IdLineaNavigation.Lnom</BSTD>
                                        <BSTD>@item.Lnfecha.ToString("dd/MM/yyyy")</BSTD>
                                        <BSTD>@item.IdEquipo</BSTD>
                                        <BSTD>@item.Lngrupo</BSTD>
                                        <BSTD>@item.Lnturno</BSTD>
                                        @if(item.LntiePerMi == -1){
                                            <BSTD>0</BSTD> 
                                        }else if(item.LntiePerMi.ToString().Count() < 5){
                                            <BSTD>@item.LntiePerMi.ToString().Replace(".",",")</BSTD> 
                                        }else{
                                            <BSTD>@item.LntiePerMi.ToString().Replace(".",",").Substring(0,5)</BSTD> 
                                        }
                                        @* <BSTD>@item.LntiePerMi.ToString()</BSTD> *@
                                        <BSTD>@item.Lndiscrepa</BSTD>
                                        @if(isTPM){
                                            <BSTD>
                                                    @if(item.LnisResu == 1){
                                                        <p>Resuelto</p>
                                                    }else{
                                                        <p>Sin Resolver</p>
                                                    }
                                            </BSTD>
                                        }
                                        @if(IsAccesoPizarra){
                                            <BSTD>
                                                <div Class="@BS.Form_Check_Inline">
                                                    <BSInputCheckbox Size="Size.ExtraLarge" CheckedValue="true" UnCheckedValue="false" @bind-Value="item.LnisPizUni"/>
                                                    <BSLabel IsCheckLabel="true"></BSLabel>
                                                </div>
                                            </BSTD>
                                        }
                                        @* .Substring(0,5) *@
                                    </BSTR>
                                    @* <BSTR>
                                        
                                        @* <BSTD>@observcion  @item.Lnobserv</BSTD> 
                                    </BSTR>  *@
                                }
                            </BSTBody>
                        </BSTable>
                        <BSRow>
                            <BSCol Column="12">
                                @if(IsAccesoPizarra){
                                    <BSButton class="buttonFormularioOK" IsDisabled="@isDisabled" @onclick=Guardar IsSubmit="true">Registrar</BSButton>
                                }
                                @* <BSButton class="buttonFormularioDLT"  IsDisabled="@isDisabled" @onclick=buscar IsReset="true" >Borrar</BSButton>  *@
                            </BSCol>
                        </BSRow>
                    }
                
                </BSCard>
        </BSCard>
    </BSCard>
}else{
    <BSRow class="carga" Justify="Justify.Center">
        <BSCol Column="3">
        <div class="loader"></div>
        </BSCol>  
    </BSRow>
}

<BSModal DataId="model9"  @ref="refModal">
    <Header>Estado</Header>
    <Content>@mensaje</Content>
    <Footer Context="modal">
        <BSButton MarginStart="Margins.Auto" class="buttonFormularioDLT" @onclick="cerrar">Close</BSButton>
    </Footer>
</BSModal>


@code{
    private string mensaje { get; set;}
    private bool Value { get; set; } = false;
    private BSAlert _alertRef;
    private bool _buttonDisabled = true;
    private DateTime filtroFechaInicio { get; set;}
    private DateTime filtroFechaFinal { get; set;}
    private int filtroTipoNovedad { get; set;}
    private int filtroLinea { get; set;}
    private List<LibroNove> listaNovedades { get; set;}
    private List<TiParTp> listaTiposNovedad { get; set;}
    private List<Linea> listaLineas { get; set;}
    private bool isDisabled  { get; set;}
    private string discrepancia  { get; set;}
    private BdDiv1 temporal  {get; set;}
    private bool band1  { get; set;}
    private bool band2  { get; set;}
    private bool IsCargado  { get; set;}
    private bool IsChempro  { get; set;}

    private bool isTPM { get; set;}
    private bool IsAccesoPizarra  { get; set;}
    private Dictionary<string,string?>? usuarioCache {get; set;}
    private string observcion  { get; set;}
    private BSModal refModal;
    private int idCentro { get; set;}
    private int idAreCargada { get; set;}
    private string? departamento { get; set;}
    private string? cargo { get; set;}
    private List<Claim> claims { get; set; }
    protected async Task cerrar(){
        await refModal.HideAsync();
    }
    
    protected override async Task  OnInitializedAsync()
    {
        IsChempro = false;
        refModal = new BSModal();
        usuarioCache = new Dictionary<string,string>();
        IsCargado = false;
        isTPM = true;
        idAreCargada = 0;

        @* var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims); *@
        
        departamento = await LocalStorage.GetItemAsync<string>("usuarioD");

        cargo = await LocalStorage.GetItemAsync<string>("usuarioC");

        usuarioCache.Add("usuarioN",await LocalStorage.GetItemAsync<string>("usuarioN"));
        usuarioCache.Add("usuarioA",await LocalStorage.GetItemAsync<string>("usuarioA"));
                
        usuarioCache["usuarioN"] =  usuarioCache["usuarioN"][0] + usuarioCache["usuarioN"].Substring(1,usuarioCache["usuarioN"].Length -1).ToLower();
        usuarioCache["usuarioA"] =  usuarioCache["usuarioA"][0] + usuarioCache["usuarioA"].Substring(1,usuarioCache["usuarioA"].Length -1).ToLower();

        if(cargo.Contains("SUPDTE") || cargo.Contains("GERENTE") || cargo.Contains("DIRECTOR") || cargo.Contains("SUPERINTENDENTE") || cargo.Contains("MEJORA CONTINUA") ||  cargo.Contains("MEJ. CONT") || cargo.Contains("JEFE DE TURNOS")  ||  cargo.Contains("J4779") ||  cargo.Contains("G4140")) {
            IsAccesoPizarra = true;
        }else{
            IsAccesoPizarra = false;
        }

        if(departamento.Contains("CORPINAL")){
            idCentro = 11;
            isTPM = false;
        }else if(departamento.Contains("MEJORA CONTINUA")){
            idCentro = 0; 
        }else if(
            departamento.Contains("CONTROL DE PROCESOS") 
            ){
            idCentro = 9;
            IsChempro = true;
            isTPM = false;
        }else if(departamento.Contains("CONVERSION")){
            idCentro = 1;
        }else if(departamento.Contains("MOLINO")){
            idCentro = 2;
        }else if(departamento.Contains("CALIDAD")){
            idCentro = 0; 
            idAreCargada = 2;
        }else if(departamento.Contains("SEGURIDAD")){
            idCentro = 0; 
            idAreCargada = 3;
        }else{
            mensaje = "No tiene acceso";
            idCentro = -1;
        }

        listaLineas = await DataLinea.ObtenerLasLineasPorCentro(idCentro);

        mensaje = "Historico de registro de las novedades";
        listaTiposNovedad = await DataTiParTP.ObtenerTodosTiposNovedad();
        filtroFechaInicio = DateTime.Now.Date;
        filtroFechaFinal = DateTime.Now.Date;
        isDisabled = false;
        discrepancia = "Discrepancia: ";
        observcion = "Observación: ";
        temporal = new BdDiv1();

        IsCargado = true;
    }

    protected async Task buscar(){
        try{
            if(filtroFechaInicio.Date == filtroFechaFinal.Date) {
                listaNovedades = null;
                if(idAreCargada == 0){
                    listaNovedades = await DataLibroNov.ObtenerLibroNovedadesPorFiltro(idCentro,filtroFechaInicio,filtroLinea,filtroTipoNovedad);
                }else{
                    listaNovedades = await DataLibroNov.ObtenerLibroNovedadesDelAreaQueCarga(filtroFechaInicio,filtroLinea,filtroTipoNovedad,idAreCargada);
                }
            }else if(filtroFechaInicio.Date < filtroFechaFinal.Date){
                listaNovedades = null;
                if(idAreCargada == 0){
                    listaNovedades = await DataLibroNov.ObtenerLibroNovedadesPorFiltroEntreFechas(idCentro,filtroFechaInicio,filtroFechaFinal,filtroLinea,filtroTipoNovedad);
                }else{
                    listaNovedades = await DataLibroNov.ObtenerLibroNovedadesDelAreaQueCargaEntreFechas(filtroFechaInicio,filtroFechaFinal,filtroLinea,filtroTipoNovedad,idAreCargada);
                }
            }else{
                listaNovedades = null;
                if(idAreCargada == 0){
                    listaNovedades = await DataLibroNov.ObtenerLibroNovedadesPorFiltroEntreFechas(idCentro,filtroFechaFinal,filtroFechaInicio,filtroLinea,filtroTipoNovedad);
                }else{
                    listaNovedades = await DataLibroNov.ObtenerLibroNovedadesDelAreaQueCargaEntreFechas(filtroFechaFinal,filtroFechaInicio,filtroLinea,filtroTipoNovedad,idAreCargada);
                }
            }
        }catch(Exception e){
            mensaje = e.Message;
        }
    }

    protected async Task Guardar(){
        isDisabled = true;

        try{
            await refModal.ShowAsync();
            band1 = await LogicLibroNov.CambiosBDLibro(idCentro,listaNovedades,filtroFechaInicio,filtroLinea,filtroTipoNovedad,usuarioCache["usuarioN"] + " " + usuarioCache["usuarioA"]);
            if(band1){
                band2 = await DataLibroNov.UpdateRegistros(listaNovedades);
                if(band2){
                    mensaje = "Se realizo de manera exitosa";
                }else{
                    mensaje = "Falla en la actualizacion de el libro de novedades, la data fue registrada en la pizarra unificada";
                }
            }else{
                mensaje = "Falla de inserción en la pizarra unificada";
            }
        }catch(Exception e){
            mensaje = e.Message;
        }
        isDisabled = false;
        //bool a = await DataPizarra.InsertarRegistro(temporal);
    }

    private void Dismissed()
    {
        _buttonDisabled = false;
    }

}
