@page "/Historico"
@inject IDataArea DataArea
@inject IDataCentro DataCentro
@inject IDataLinea DataLinea
@inject IDataAPI DataAPI
@inject IDataLibroNov DataLibroNov
@inject IDataTiParTP DataTiParTP
@inject IDataPizarra DataPizarra
@inject ILogicLibroNov LogicLibroNov
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager

    <PageTitle>Historico</PageTitle>
@if(IsCargado){
    <BSContainer PaddingBottom="Padding.Large">
        <BSRow>
            <h1 class="titulo">Historico</h1>
        </BSRow>
    </BSContainer>

    <BSCard CardType="CardType.Card" style="width: 90%;" MarginBottom="Margins.Large">
        <BSAlert IsOpen="_showTooltip" style="height:55px;" class="alertaInfo"  @ref="_alertRef" Dismissed="Dismissed">
            <h5>@mensaje</h5>
        </BSAlert>
        <BSCard CardType="CardType.Body">
            @if(IsAcceso){
                <BSCard CardType="CardType.Text">
                    
                    <BSRow>
                        <BSCol Position="Position.Relative" Place ColumnMedium="3">
                            <BSLabel class="labelFormulario">Fecha</BSLabel>
                            <BSInput BSInput InputType="InputType.Date" rows="1" @bind-Value="filtroFecha"></BSInput>
                        </BSCol>
                        <BSCol Position="Position.Relative" Place ColumnMedium="3">
                            <BSLabel class="labelFormulario">Linea</BSLabel>
                                <BSInput  InputType="InputType.Select" @bind-Value="filtroLinea">
                                    <option value="0">Seleccionar la Linea</option>
                                    @if (listaLineas != null)
                                    {
                                        <option value="0">Todos</option>
                                        @foreach (var item in listaLineas)
                                        {
                                            <option value="@item.IdLinea">@item.Lnom</option>
                                        }
                                    }
                                </BSInput>
                        </BSCol>
                        <BSCol Position="Position.Relative" Place ColumnMedium="5">
                            <BSLabel class="labelFormulario">Tipo de Novedad</BSLabel>
                                <BSInput  InputType="InputType.Select" @bind-Value="filtroTipoNovedad">
                                    <option value="0">Seleccionar el Tipo de Novedad</option>
                                    @if (listaTiposNovedad != null)
                                    {
                                        <option value="0">Todos</option>
                                        @foreach (var item in listaTiposNovedad)
                                        {
                                            <option value="@item.IdTiParTp">@item.Tpnombre.ToUpper()</option>
                                        }   
                                    }
                                </BSInput>
                        </BSCol>
                    </BSRow> 
                    <br>
                    <BSRow>
                        <BSCol Position="Position.Relative" Place ColumnMedium="4">
                            <BSButton class="buttonFormularioOK" IsDisabled="@isDisabled"  @onclick="buscar">Buscar</BSButton>
                        </BSCol>
                    </BSRow>
                    @if (listaNovedades != null)
                    {
                        <br>
                        <br>
                        <BSTable IsResponsive="true" IsStriped="true">
                            <BSTHead>
                                <BSTR class="cabeceraTabla">
                                    <BSTD>Linea</BSTD>
                                    <BSTD>Codigo de Equipo</BSTD>
                                    <BSTD>Grupo</BSTD>
                                    <BSTD>Turno</BSTD>
                                    <BSTD>Tiempo Perdido (min)</BSTD>
                                    <BSTD>Pizarra Unificada</BSTD>
                                </BSTR>
                            </BSTHead>
                            <BSTBody class="cuerpoTabla">
                                @foreach (var item in listaNovedades){
                                    <BSTR>
                                        <BSTD>@item.IdLineaNavigation.Lnom</BSTD>
                                        <BSTD>@item.IdEquipo</BSTD>
                                        <BSTD>@item.Lngrupo</BSTD>
                                        <BSTD>@item.Lnturno</BSTD>
                                        @if(item.LntiePerMi == -1){
                                            <BSTD>Sin Perdida de Tiempo</BSTD> 
                                        }else if(item.LntiePerMi.ToString().Count() < 5){
                                            <BSTD>@item.LntiePerMi.ToString().Replace(".",",")</BSTD> 
                                        }else{
                                            <BSTD>@item.LntiePerMi.ToString().Replace(".",",").Substring(0,5)</BSTD> 
                                        }
                                        @* <BSTD>@item.LntiePerMi.ToString()</BSTD> *@
                                        <BSTD>
                                            <div Class="@BS.Form_Check_Inline">
                                                <BSInputCheckbox Size="Size.ExtraLarge" CheckedValue="true" UnCheckedValue="false" @bind-Value="item.LnisPizUni"/>
                                                <BSLabel IsCheckLabel="true"></BSLabel>
                                            </div>
                                        </BSTD>
                                        @* .Substring(0,5) *@
                                    </BSTR>
                                    <BSTR>
                                        <BSTD>@discrepancia  @item.Lndiscrepa</BSTD>
                                        @* <BSTD>@observcion  @item.Lnobserv</BSTD> *@
                                    </BSTR>
                                    
                                
                                }
                            </BSTBody>
                        </BSTable>
                        <BSRow>
                            <BSCol Column="12">
                                <BSButton class="buttonFormularioOK" IsDisabled="@isDisabled" @onclick=Guardar IsSubmit="true">Registrar</BSButton>
                                <BSButton class="buttonFormularioDLT"  IsDisabled="@isDisabled" @onclick=buscar IsReset="true" >Borrar</BSButton> 
                            </BSCol>
                        </BSRow>
                    }
                
                </BSCard>
            }
        </BSCard>
    </BSCard>
}else{
    <BSRow class="carga" Justify="Justify.Center">
        <BSCol Column="3">
        <div class="loader"></div>
        </BSCol>  
    </BSRow>
}

<BSModal DataId="model9"  @ref="refModal">
    <Header>Estado</Header>
    <Content>@mensaje</Content>
    <Footer Context="modal">
        <BSButton MarginStart="Margins.Auto" class="buttonFormularioDLT" @onclick="modal.HideAsync">Close</BSButton>
    </Footer>
</BSModal>


@code{
    private string mensaje { get; set;}
    private bool Value { get; set; } = false;
    private BSAlert _alertRef;
    private bool _buttonDisabled = true;
    private DateTime filtroFecha { get; set;}
    private int filtroTipoNovedad { get; set;}
    private int filtroLinea { get; set;}
    private List<LibroNove> listaNovedades { get; set;}
    private List<TiParTp> listaTiposNovedad { get; set;}
    private List<Linea> listaLineas { get; set;}
    private bool isDisabled  { get; set;}
    private string discrepancia  { get; set;}
    private BdDiv1 temporal  {get; set;}
    private bool band1  { get; set;}
    private bool band2  { get; set;}
    private bool IsAcceso  { get; set;}
    private bool IsCargado  { get; set;}
    private Dictionary<string,string?>? usuarioCache {get; set;}
    private string observcion  { get; set;}
    private BSModal refModal;
    private int idCentro { get; set;}

    protected  async Task Carga()
    {
        if(true){
            usuarioCache = new Dictionary<string,string>();
            usuarioCache.Add("usuarioD",await sessionStorage.GetItemAsync<string>("usuarioD"));
            if(usuarioCache["usuarioD"] == "" ||  usuarioCache["usuarioD"]  == null){
                NavigationManager.NavigateTo("Login");
            }else{
                IsCargado = true;
                IsAcceso = true;
                if(usuarioCache["usuarioD"].Contains("CONVERSION")){
                    idCentro = 1;
                    listaLineas = await DataLinea.ObtenerLasLineasPorCentro(idCentro);
                }else if(usuarioCache["usuarioD"].Contains("MOLINOS")){
                    idCentro = 2;
                    listaLineas = await DataLinea.ObtenerLasLineasPorCentro(idCentro);
                }else if(usuarioCache["usuarioD"].Contains("CONTROL DE PROCESOS")){
                    idCentro = 9;
                    listaLineas = await DataLinea.ObtenerLasLineasPorCentro(idCentro);
                }else{
                    IsAcceso = false;
                    mensaje = "No tiene acceso";
                }
            }
        }
        IsCargado = true;
    }

    
    
    protected override async Task  OnInitializedAsync()
    {
        refModal = new BSModal();
        IsCargado = false;
        IsAcceso = false;
        mensaje = "Historico de registro de las novedades";
        listaTiposNovedad = await DataTiParTP.ObtenerTodosTiposNovedad();
        filtroFecha = DateTime.Now.Date;
        isDisabled = false;
        discrepancia = "Discrepancia: ";
        observcion = "Observaci√≥n: ";
        temporal = new BdDiv1();
        await this.Carga();
    }

    

    protected async Task buscar(){
        listaNovedades = null;
        listaNovedades = await DataLibroNov.ObtenerLibroNovedadesPorFiltro(idCentro,filtroFecha,filtroLinea,filtroTipoNovedad);
    }
    protected async Task Guardar(){
        band1 = await LogicLibroNov.CambiosBDLibro(idCentro,listaNovedades,filtroFecha,filtroLinea,filtroTipoNovedad);
        if(band1){
            band2 = await DataLibroNov.UpdateRegistros(listaNovedades);
            if(band2){
                mensaje = "Se realizo de manera exitosa";
            }else{
                mensaje = "Falla en la actualizacion de el libro de novedades, la data fue registrada en la pizarra unificada";
            }
        }else{
            mensaje = "Falla de inserci√≥n en la pizarra unificada";
        }
        await refModal.ShowAsync();
        //bool a = await DataPizarra.InsertarRegistro(temporal);
    }

    private void Dismissed()
    {
        _buttonDisabled = false;
    }

}
