@page "/Historico"

@inject IDataPais DataPais;
@inject IDataEmpresa DataEmpresa;
@inject IDataCentro DataCentro;
@inject IDataDivision DataDivision;
@inject IDataLinea DataLinea;
@inject IDataEquipoEAM DataEquipoEAM;
@inject IDataAPI DataAPI;
@inject IDataLibroNov DataLibroNov;
@inject IDataTiParTP DataTiParTP;
@inject IDataClasifiTPM DataClasifiTPM;
@inject IDataDivision DataDivision;
@inject ILogicLibroNov LogicLibroNov;

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage


@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Historico</PageTitle>
@if(IsCargado){
    <BSContainer PaddingBottom="Padding.Large">
        <BSRow>
            <h1 class="titulo">Historico</h1>
        </BSRow>
    </BSContainer>

    <BSCard CardType="CardType.Card" style="width: 90%;" MarginBottom="Margins.Large">
        <BSAlert IsOpen="_showTooltip" style="height:55px;" class="alertaInfo"  @ref="_alertRef" >
            <h5>@mensaje</h5>
        </BSAlert> 
            <BSCard CardType="CardType.Body">

                <BSCard CardType="CardType.Text">
                    
                    <BSRow>
                        <BSCol class="item" Position="Position.Relative" Place ColumnMedium="3">
                            <BSLabel class="labelFormulario">Fecha</BSLabel>
                            <BSInput BSInput InputType="InputType.Date" rows="1" @bind-Value="filtroFecha"></BSInput>
                        </BSCol>
                        <BSCol class="item" Position="Position.Relative" Place ColumnMedium="5">
                            <BSLabel class="labelFormulario">Tipo de Novedad</BSLabel>
                                <BSInput  InputType="InputType.Select" @bind-Value="filtroTipoNovedad">
                                    <option value="0">Seleccionar el Tipo de Novedad</option>
                                    @if (listaTiposNovedad != null)
                                    {
                                        <option value="0">Todos</option>
                                        @foreach (var item in listaTiposNovedad)
                                        {
                                            <option value="@item.IdTiParTp">@item.Tpnombre.ToUpper()</option>
                                        }  
                                    }
                                </BSInput>
                        </BSCol>
                        @if(isAccesoPais){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Pais</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idPais" @onchange="BuscarEmpresas">
                                            @if(listaPais != null){
                                                <option value="0">Seleccione un pais</option>
                                                @foreach (var item in listaPais)
                                                {
                                                    <option value="@item.IdPais">@item.Pnombre</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            @if(isAccesoEmpresa){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Empresas</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idEmpresa" @onchange="BuscarCentros">
                                            @if(listaEmpresa != null){
                                                <option value="0">Seleccione un Centro</option>
                                                @foreach (var item in listaEmpresa)
                                                {
                                                    <option value="@item.IdEmpresa">@item.Enombre</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            @if(isAccesoCentro){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Centro</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idCentro" @onchange="BuscarDivisiones">
                                            @if(listaCentro != null){
                                                <option value="0">Seleccione un Centro</option>
                                                @foreach (var item in listaCentro)
                                                {
                                                    <option value="@item.IdCentro">@item.Cnom</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            @if(isAccesoDivision){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Divisiones</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idDivision" @onchange="BuscarLinea">
                                            @if(listaDivision != null){
                                                <option value="0">Seleccione una division</option>
                                                @foreach (var item in listaDivision)
                                                {
                                                    <option value="@item.IdDivision">@item.Dnombre</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Linea</BSLabel>
                                        <BSInput InputType="InputType.Select" @bind-Value="filtroLinea">
                                            @if (idDivision != 0)
                                            {   
                                                @if(listaLinea != null){
                                                    <option value="0">Seleccione un Linea</option>
                                                    <option value="0">Todos</option>
                                                    @foreach (var item in listaLinea)
                                                    {
                                                        <option value="@item.IdLinea">@item.Lnom</option>
                                                    }
                                                }else{
                                                    <option value="0">Cargando...</option>
                                                }
                                            }else{
                                                <option value="0">Seleccione una Divisi√≥n</option>
                                            }
                                        </BSInput>
                            </BSCol>
                        
                    </BSRow> 
                    <br>
                    <BSRow>
                        <BSCol Position="Position.Relative" Place ColumnMedium="4">
                            <BSButton class="buttonFormularioOK" IsDisabled="@isDisabled"  @onclick="buscar">Buscar</BSButton>
                        </BSCol>
                    </BSRow>
                    @if (listaNovedades != null)
                    {
                        <br>
                        <br>
                        <BSTable IsResponsive="true" IsStriped="true">
                            <BSTHead>
                                <BSTR class="cabeceraTabla">
                                    <BSTD>Linea</BSTD>
                                    <BSTD>Codigo de Equipo</BSTD>
                                    <BSTD>Grupo</BSTD>
                                    <BSTD>Turno</BSTD>
                                    <BSTD>Tiempo Perdido (min)</BSTD>
                                    <BSTD>Discrepancia</BSTD>
                                    <BSTD>Estado</BSTD>
                                    
                                    @if(IsAccesoPizarra){
                                        
                                        <BSTD>Pizarra Unificada</BSTD>
                                    }
                                </BSTR>
                            </BSTHead>
                            <BSTBody class="cuerpoTabla">
                                @foreach (var item in listaNovedades){
                                    <BSTR>
                                        <BSTD>@item.IdLineaNavigation.Lnom</BSTD>
                                        <BSTD>@item.IdEquipo</BSTD>
                                        <BSTD>@item.Lngrupo</BSTD>
                                        <BSTD>@item.Lnturno</BSTD>
                                        @if(item.LntiePerMi == -1){
                                            <BSTD>0</BSTD> 
                                        }else if(item.LntiePerMi.ToString().Count() < 5){
                                            <BSTD>@item.LntiePerMi.ToString().Replace(".",",")</BSTD> 
                                        }else{
                                            <BSTD>@item.LntiePerMi.ToString().Replace(".",",").Substring(0,5)</BSTD> 
                                        }
                                        @* <BSTD>@item.LntiePerMi.ToString()</BSTD> *@
                                        <BSTD>@item.Lndiscrepa</BSTD>
                                        
                                        <BSTD>
                                            @if(item.LnisResu == 1){
                                                <p>Resuelto</p>
                                            }else if(item.LnisResu == 0){
                                                <p>Sin Resolver</p>
                                            }else{
                                                <p> - </p>
                                            }
                                        </BSTD>
                                        
                                        @if(IsAccesoPizarra){
                                            <BSTD>
                                                <div Class="@BS.Form_Check_Inline">
                                                    <BSInputCheckbox Size="Size.ExtraLarge" CheckedValue="true" UnCheckedValue="false" @bind-Value="item.LnisPizUni"/>
                                                    <BSLabel IsCheckLabel="true"></BSLabel>
                                                </div>
                                            </BSTD>
                                        }
                                    </BSTR>
                                    
                                }
                            </BSTBody>
                        </BSTable>
                        <BSRow>
                            <BSCol Column="12">
                                @if(IsAccesoPizarra){
                                    <BSButton class="buttonFormularioOK" IsDisabled="@isDisabled" @onclick=Guardar IsSubmit="true">Registrar</BSButton>
                                }
                                @* <BSButton class="buttonFormularioDLT"  IsDisabled="@isDisabled" @onclick=buscar IsReset="true" >Borrar</BSButton>  *@
                            </BSCol>
                        </BSRow>
                    }
                
                </BSCard>
        </BSCard>
    </BSCard>
}else{
    <BSRow class="carga" Justify="Justify.Center">
        <BSCol Column="3">
        <div class="loader"></div>
        </BSCol>  
    </BSRow>
}

<BSModal DataId="model9"  @ref="refModal">
    <Header>Estado</Header>
    <Content>@mensaje</Content>
    <Footer Context="modal">
        <BSButton MarginStart="Margins.Auto" class="buttonFormularioDLT" @onclick="cerrar">Close</BSButton>
    </Footer>
</BSModal>


@code{

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private DateTime filtroFecha { get; set;}
    private int filtroTipoNovedad { get; set;}
    private int filtroLinea { get; set;}
    private bool isAccesoPais {get;set;}
    private bool isAccesoEmpresa {get;set;}
    private bool isAccesoCentro {get;set;}
    private bool isAccesoDivision {get;set;}
    private bool isAccesoLinea {get;set;}
    private bool IsAccesoPizarra  { get; set;}
    private bool IsCargado  { get; set;}
    private bool isDisabled  { get; set;}
    private bool band1  { get; set;}
    private bool band2  { get; set;}
    private string? rol { get; set;}
    private string mensaje { get; set;}
    private List<Pai> listaPais {get;set;} 
    private List<Empresa> listaEmpresa {get;set;}
    private List<Centro> listaCentro {get;set;}
    private List<Division> listaDivision {get;set;}
    private List<Linea> listaLinea {get;set;}
    private List<LibroNove> listaNovedades { get; set;}
    private List<TiParTp> listaTiposNovedad { get; set;}
    private int idPais { get; set; }
    private int idEmpresa { get; set; }
    private int idCentro  { get; set;}
    private int idDivision { get; set; }
    private int idLinea { get; set; }
    private int idAreCargada { get; set;}
    private BSAlert _alertRef;
    private BSModal refModal;

    protected override async Task  OnInitializedAsync()
    {
        IsCargado = false;
        if (authenticationState is not null){

            AuthenticationState? authState = await authenticationState;
            ClaimsPrincipal? user = authState?.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                mensaje = "Historico de registro de las novedades";
                isDisabled = false;
                refModal = new BSModal();
                idAreCargada = 0;
                IsAccesoPizarra = false;
                filtroFecha = DateTime.Now.Date;

                rol = user.FindFirst(c => c.Type.Contains("role"))?.Value ?? "";
                idCentro = int.Parse(user.FindFirst(c => c.Type == "IdCentro")?.Value ?? "0");
                idPais = int.Parse(user.FindFirst(c => c.Type == "IdPais")?.Value ?? "0") ;
                idDivision = int.Parse(user.FindFirst(c => c.Type == "IdDivision")?.Value ?? "0") ;
                idEmpresa = int.Parse(user.FindFirst(c => c.Type == "IdEmpresa")?.Value ?? "0") ;

                isAccesoPais = false;
                isAccesoEmpresa = false;
                isAccesoCentro = false;
                isAccesoDivision = false;
                isAccesoLinea = false;

                listaTiposNovedad = await DataTiParTP.ObtenerTodosTiposNovedad();

                if(rol.Contains("SuperAdmin")){
                    isAccesoPais = true;
                    isAccesoEmpresa = true;
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    IsAccesoPizarra = true;
                    
                    // Todos los paises con todas las empresas centros, divisiones y lineas
                    listaPais = await DataPais.ObtenerTodosLosPaises();
                    listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);

                }else if(rol.Contains("SuperUser")){
                    isAccesoPais = true;
                    isAccesoEmpresa = true;
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    IsAccesoPizarra = true;
                    
                    // Todos los paises con todas las empresas centros, divisiones y lineas
                    listaPais = await DataPais.ObtenerTodosLosPaises();
                    listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);

                }else if(rol.Contains("UserPais")){
                    isAccesoEmpresa = true;
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    if(rol.Contains("Operaciones")){
                        IsAccesoPizarra = true;
                    }

                    // Todas las empresas de ese pais con sus centros, divisiones y lineas
                    listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }else if(rol.Contains("UserEmpresa")){
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    if(rol.Contains("Operaciones")){
                        IsAccesoPizarra = true;
                    }

                    // todos los centros,divisiones y lineas de esa empresa
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }else if(rol.Contains("UserCentro")){ 
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    if(rol.Contains("Operaciones")){
                        IsAccesoPizarra = true;
                    }
                    // todas las divisiones y lineas de ese centro
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }else if(rol.Contains("UserDivision")){
                    isAccesoLinea = true;
                    // todas las lineas de esa division
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }


                if(rol.Contains("Calidad")){
                    idAreCargada = 2;
                }else if(rol.Contains("Seguridad")){
                    idAreCargada = 3;
                }else if(rol.Contains("Mantenimiento")){
                    idAreCargada = 4;
                }else if(rol.Contains("Operaciones")){
                    idAreCargada = 0;
                }else{
                    mensaje = "Hubo un error por favor inici√© sesi√≥n nuevamente. Si sigue el error contacte a mejora continua";
                }
            }else{
                mensaje = "Sin Acceso";
            }
        }
        IsCargado = true;
    }

    protected async Task BuscarEmpresas(ChangeEventArgs e){
        idPais = int.Parse(e.Value.ToString());
        idEmpresa = 0;
        idCentro = 0;
        idDivision = 0;
        idLinea = 0;
        try{
            if(idCentro != 0){
                listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
            }
        }catch(Exception ex){
            mensaje = ex.Message;
        }
    }

    protected async Task BuscarCentros(ChangeEventArgs e){
        idEmpresa = int.Parse(e.Value.ToString());
        idCentro = 0;
        idDivision = 0;
        idLinea = 0;
        try{
            if(idCentro != 0){
                listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
            }
        }catch(Exception ex){
            mensaje = ex.Message;
        }
    }

    protected async Task BuscarDivisiones(ChangeEventArgs e){
        idCentro = int.Parse(e.Value.ToString());
        idDivision = 0;
        idLinea = 0;
        try{
            if(idCentro != 0){
                listaDivision= await DataDivision.ObtenerDivisionDelCentro(idCentro);
            }
        }catch(Exception ex){
            mensaje = ex.Message;
        }
    }

    protected async Task BuscarLinea(ChangeEventArgs e){
        idDivision = int.Parse(e.Value.ToString());
        idLinea = 0;
        filtroLinea = 0;
        try{
            if(idCentro != 0){
                listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
            }
        }catch(Exception ex){
            mensaje = ex.Message;
        }
    }

    protected async Task cerrar(){
        await refModal.HideAsync();
    }

    protected async Task buscar(){
        try{
            listaNovedades = null;
            if(idAreCargada == 0){
                listaNovedades = await DataLibroNov.ObtenerLibroNovedadesPorFiltro(idCentro,filtroFecha,filtroLinea,filtroTipoNovedad);
            }else{
                listaNovedades = await DataLibroNov.ObtenerLibroNovedadesDelAreaQueCarga(filtroFecha,filtroLinea,filtroTipoNovedad,idAreCargada);
            }
        }catch(Exception e){
            mensaje = e.Message;
        }
    }

    protected async Task Guardar(){
        isDisabled = true;

        try{
            await refModal.ShowAsync();
            band1 = await LogicLibroNov.CambiosBDLibro(idCentro,listaNovedades,filtroFecha,filtroLinea,filtroTipoNovedad);
            if(band1){
                band2 = await DataLibroNov.UpdateRegistros(listaNovedades);
                if(band2){
                    mensaje = "Se realizo de manera exitosa";
                }else{
                    mensaje = "Falla en la actualizacion de el libro de novedades, la data fue registrada en la pizarra unificada";
                }
            }else{
                mensaje = "Falla de inserci√≥n en la pizarra unificada";
            }
        }catch(Exception e){
            mensaje = e.Message;
        }
        isDisabled = false;
    }
}
