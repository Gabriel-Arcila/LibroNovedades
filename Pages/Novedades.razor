@page "/Formato"
@inject IDataArea DataArea;
@inject IDataCentro DataCentro;
@inject IDataLinea DataLinea;
@inject IDataAPIOEE DataAPIOEE;
@inject IDataLibroNov DataLibroNov;

<PageTitle>Formato</PageTitle>


<BSContainer PaddingBottom="Padding.Large">
     <BSRow>
        <h1 class="titulo">Libro de Novedades</h1>
    </BSRow>
</BSContainer>

<BSCard CardType="CardType.Card" style="width: 90%;" MarginBottom="Margins.Large">
    <BSAlert IsOpen="_showTooltip" style="height:55px;" class="alertaInfo" IsDismissible="true" @ref="_alertRef" Dismissed="Dismissed">
        <h5>@mensaje</h5>
    </BSAlert>
    <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Text">
            <BSForm Model="dataNove" IsRow="true" Gutters="Gutters.Medium" OnSubmit="OK">
                <DataAnnotationsValidator />
                <BSCol Position="Position.Relative" Place ColumnMedium="4">
                        <BSLabel class="labelFormulario">Centro</BSLabel>
                        <BSInput InputType="InputType.Select" @bind-Value="dataNove.IdAreaCar" @onchange="BuscarLinea">
                            @if(ListaCentro != null){
                                <option value="0">Seleccione un Centro</option>
                                @foreach (var item in ListaCentro)
                                {
                                    <option value="@item.IdCentro">@item.Cnom</option>
                                }
                            }else{
                                <option value="0">Cargando...</option>
                            }
                        </BSInput>
                <BSFeedback For="@(() => dataNove.IdAreaCar)"/> 
                </BSCol>
                <BSCol Position="Position.Relative" Place ColumnMedium="4">
                        <BSLabel class="labelFormulario">Linea</BSLabel>
                        <BSInput InputType="InputType.Select" @bind-Value="dataNove.IdLinea" @onchange="BuscarTiempoPerdido">
                            @if (dataNove.IdAreaCar != 0)
                            {   
                                @if(ListaLinea != null){
                                    <option value="0">Seleccione un Linea</option>
                                    @foreach (var item in ListaLinea)
                                    {
                                        <option value="@item.IdLinea">@item.Lnom</option>
                                    }
                                }else{
                                    <option value="0">Cargando...</option>
                                }
                            }else{
                                <option value="0">Seleccione un Centro</option>
                            }
                        </BSInput>
                        <BSFeedback For="@(() => dataNove.IdLinea)"/> 
                </BSCol>
                
                <BSCol Position="Position.Relative" Place ColumnMedium="4">
                        <BSLabel class="labelFormulario">ID Maquina</BSLabel>
                        <BSInput InputType="InputType.Text" rows="1" @bind-Value="dataNove.IdMaquina"></BSInput>
                        <BSFeedback For="@(() => dataNove.IdMaquina)"/> 
                </BSCol>
                <BSCol Position="Position.Relative" Place ColumnMedium="4">
                        <BSLabel class="labelFormulario">ID Equipo</BSLabel>
                        <BSInput InputType="InputType.Text" rows="1" @bind-Value="dataNove.IdEquipo"></BSInput>
                        <BSFeedback For="@(() => dataNove.IdEquipo)"/> 
                </BSCol>
                <BSCol Position="Position.Relative" Place ColumnMedium="4">
                        <BSLabel class="labelFormulario">Ficha</BSLabel>
                        <BSInput InputType="InputType.Text" rows="1" @bind-Value="dataNove.RdfichaRes"></BSInput>
                        <BSFeedback For="@(() => dataNove.RdfichaRes)"/> 
                </BSCol>
                <BSCol Position="Position.Relative" Place ColumnMedium="4">
                        <BSLabel class="labelFormulario">Grupo</BSLabel>
                        <BSInput  InputType="InputType.Select" @bind-Value="dataNove.Rdgrupo">
                            <option value="0">Seleccionar Grupo</option>
                            <option value="A">Grupo A</option>
                            <option value="B">Grupo B</option>
                            <option value="C">Grupo C</option>
                            <option value="D">Grupo D</option>
                        </BSInput>
                        <BSFeedback For="@(() => dataNove.Rdgrupo)"/> 
                </BSCol>
                <BSCol Position="Position.Relative" Place ColumnMedium="4">
                        <BSLabel class="labelFormulario">Turno</BSLabel>
                        <BSInput  InputType="InputType.Select" @bind-Value="dataNove.RdTurno">
                            <option value="0">Seleccionar Grupo</option>
                            <option value="1">1er turno</option>
                            <option value="2">2do truno</option>
                        </BSInput>
                        <BSFeedback For="@(() => dataNove.RdTurno)"/> 
                </BSCol>
                <BSCol Position="Position.Relative" Place ColumnMedium="8">
                        <BSLabel class="labelFormulario">Discrepancia</BSLabel>
                        <BSInput InputType="InputType.TextArea" rows="1" @bind-Value="dataNove.Rddiscrepa"></BSInput>
                        <BSFeedback For="@(() => dataNove.Rddiscrepa)"/> 
                </BSCol>
                <BSCol Column="12">
                        <BSButton class="buttonFormularioOK" IsDisabled="@isDisabled" IsSubmit="true">Registrar</BSButton>
                </BSCol>
            </BSForm>
            <br>
            <br>
            <BSTable IsResponsive="true" IsStriped="true">
                <BSTHead>
                    <BSTR class="cabeceraTabla">
                        <BSTD>#</BSTD>
                        <BSTD>Descripcion</BSTD>
                        <BSTD>Tiempo</BSTD>
                        <BSTD>Seleccionar</BSTD>
                    </BSTR>
                </BSTHead>
                <BSTBody class="cuerpoTabla">
                    @if(paradas == null){
                        <BSTR>
                            <BSTD ColSpan="5">Cargando...</BSTD>
                        </BSTR>
                    }else{
                        @foreach (var item in index)
                        {
                            <BSTR>
                                <BSTD>@item</BSTD>
                                <BSTD>@paradas[2][item]</BSTD>
                                <BSTD>@paradas[3][item].Substring(0,5).Replace(".",",")</BSTD>
                                <BSTD><BSButton class="buttonFormularioOK" @onclick="@(e => eleccion(item))">Seleccionar</BSButton></BSTD>
                            </BSTR>
                        }
                    }
                </BSTBody>
            </BSTable>
        </BSCard>
    </BSCard>
    
</BSCard>
@code{
    public string? mensaje { get; set;}
    public LibroNove dataNove  { get; set;}
    public List<Centro> ListaCentro { get; set;}
    public List<Linea> ListaLinea { get; set;}

    public List<LinAre> ListaArea { get; set;}
    private BSAlert _alertRef;
    private bool _showTooltip;

    public int idLinea { get; set;}
    
    private bool _buttonDisabled = true;

    private List<List<string>> paradas;
    //public HttpClient cliente { get; set;}
    public List<int> index  { get; set;}

    public bool isDisabled  { get; set;}
    public bool bandera  { get; set;}
    protected override async Task  OnInitializedAsync()
    {
        mensaje = "Registre una Novedad";
        dataNove = new LibroNove();
        ListaCentro = await DataCentro.ObtenerTodosLosCentro();
        ListaArea = new List<LinAre>();
        ListaLinea = new List<Linea>();
        paradas = new List<List<string>>();
        index = new List<int>();
        isDisabled = false;
        
    }
    protected async Task OK(EditContext e){
        isDisabled = true;
        dataNove.Rdfecha = DateTime.Now;
        if (e.Validate())
        {
            bandera = await DataLibroNov.InsertarRegistro(dataNove);

            if(bandera){
                mensaje = "Guardado Exitosamente";
            }else{
                mensaje = "Error. Intente de nuevo";
            }

        }else if( dataNove.RdtiePerMi == 0 || dataNove.IdTipoNove == 0 ){
            mensaje = "Seleccione una causa de tiempo perdido";
            _buttonDisabled = true;
        }
        isDisabled = false;
        _showTooltip = true;
    }

    protected async Task BuscarLinea(ChangeEventArgs e){
        dataNove.IdAreaCar = Int32.Parse(e.Value.ToString());
        if(dataNove.IdAreaCar != 0){
            ListaLinea = await DataLinea.ObtenerLasLineasPorCentro(dataNove.IdAreaCar);
        }else{
            dataNove.IdLinea = 0;
        }
    }

    protected async Task BuscarTiempoPerdido(ChangeEventArgs e){
        dataNove.IdLinea = int.Parse(e.Value.ToString());
        Linea linea =  ListaLinea.Where(l => l.IdLinea == int.Parse(e.Value.ToString())).First();
        paradas = await DataAPIOEE.obtenerParadasActuales1turnoPorLinea(linea.LcenCos);
        index = new List<int>(paradas[0].Count());
        for (int i = 0; i < index.Capacity; i++){  index.Add(i); }
    }

    public async Task eleccion(int item){
        dataNove.IdTipoNove = int.Parse(paradas[0][item]);
        dataNove.RdtiePerMi = double.Parse(paradas[2][item].Replace(".",","));
    }
    
    private void Dismissed()
    {
        _buttonDisabled = false;
    }
}

